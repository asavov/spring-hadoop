<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:hdp="http://www.springframework.org/schema/hadoop"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      	http://www.springframework.org/schema/batch	http://www.springframework.org/schema/batch/spring-batch.xsd
      	http://www.springframework.org/schema/hadoop http://www.springframework.org/schema/hadoop/spring-hadoop.xsd">

	<import resource="../batch-common.xml" />
	<import resource="../hadoop-ctx.xml" />

	<hdp:script id="cleanScript" language="javascript" run-at-startup="true">
		if
		(fsh.test("${hdfs.item.writer.output.dir}")) {
		fsh.rmr("${hdfs.item.writer.output.dir}")
		}
	</hdp:script>

	<!-- The source of objects to write -->
	<bean id="pojosItemReader" class="org.springframework.batch.item.support.ListItemReader"
		scope="prototype">
		<constructor-arg>
			<bean class="org.springframework.data.hadoop.serialization.HdfsWriterTest"
				factory-method="createPojoList">
				<constructor-arg
					value="org.springframework.data.hadoop.serialization.HdfsWriterTest.PojoWritable" />
				<constructor-arg value="100" />
			</bean>
		</constructor-arg>
	</bean>

	<!-- Create JAVA serialization format -->
	<bean id="seqFileSerialization" class="org.springframework.data.hadoop.serialization.SequenceFileFormat"
		scope="prototype">
		<constructor-arg
			value="org.springframework.data.hadoop.serialization.HdfsWriterTest.PojoWritable" />

		<property name="configuration" ref="hadoopConfiguration" />
	</bean>

	<!-- Create AVRO serialization format -->
	<bean id="avroSerialization" class="org.springframework.data.hadoop.serialization.AvroFormat"
		scope="prototype">
		<constructor-arg
			value="org.springframework.data.hadoop.serialization.HdfsWriterTest.PojoWritable" />
	</bean>

	<!-- Create 'write-to-hdfs' service -->
	<bean id="serializationFormat"
		class="org.springframework.data.hadoop.serialization.SerializationFormatFactoryBean">
		<constructor-arg ref="hadoopResourceLoader" />

		<property name="serializationFormatBeanName" value="seqFileSerialization" />
		<!-- <property name="destinationPath" value="${hdfs.item.writer.output.dir}sfFactoryBean"/> -->
	</bean>

	<!-- Configure single-step jobs writing to hdfs using different completion policies -->

	<bean class="org.springframework.batch.core.scope.StepScope" p:proxyTargetClass="true" />

	<!-- Create Batch ItemWriter wrapping 'write-to-hdfs' service -->
	<bean id="hdfsItemWriter" class="org.springframework.data.hadoop.batch.HdfsItemWriter"
		p:hdfsWriter-ref="&amp;serializationFormat" p:destination="${hdfs.item.writer.output.dir}hdfsItemWriter"
		scope="step">
	</bean>

	<bean id="completionPolicy" class="org.springframework.batch.repeat.policy.DefaultResultCompletionPolicy" />

	<job id="hdfsItemWriterJob" xmlns="http://www.springframework.org/schema/batch">
		<step id="hdfsItemWriterStep">
			<tasklet>
				<chunk reader="pojosItemReader" writer="hdfsItemWriter"
					chunk-completion-policy="completionPolicy" />
			</tasklet>
		</step>
	</job>

	<!-- Create Batch ItemWriter wrapping 'write-to-hdfs' service -->
	<bean id="hdfsItemStreamWriter" class="org.springframework.data.hadoop.batch.HdfsItemStreamWriter"
		p:hdfsWriter-ref="&amp;serializationFormat" p:destination="${hdfs.item.writer.output.dir}hdfsItemStreamWriter"
		scope="step">
	</bean>
	<job id="hdfsItemStreamWriterJob" xmlns="http://www.springframework.org/schema/batch">
		<step id="hdfsItemStreamWriterStep">
			<tasklet>
				<chunk reader="pojosItemReader" writer="hdfsItemStreamWriter" commit-interval="25" />
			</tasklet>
		</step>
	</job>

	<!-- Create Batch ItemWriter wrapping 'write-to-hdfs' service -->
	<bean id="hdfsMultiResourceItemWriter" class="org.springframework.data.hadoop.batch.HdfsMultiResourceItemWriter"
		p:delegate-ref="hdfsItemWriter" p:baseDestination="${hdfs.item.writer.output.dir}hdfsMultiResourceItemWriter"
		scope="step">
	</bean>
	<job id="hdfsMultiResourceItemWriterJob" xmlns="http://www.springframework.org/schema/batch">
		<step id="hdfsMultiResourceItemWriterStep">
			<tasklet>
				<chunk reader="pojosItemReader" writer="hdfsMultiResourceItemWriter"
					commit-interval="25" />
			</tasklet>
		</step>
	</job>
</beans>